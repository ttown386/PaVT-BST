Bool PaVTTraversal(key k){
	n = root
	f = path to take based on root and key (so less than is left and greater than is right)
	While(n.f != null ) //so while the next path we take is not null
		n = n.f // So it would be the next node in our path
		f = path based on n and key k
		if(f == null){ //it is null if the next path function for f is returning null because we are at the node we are looking for
			if n.marked then restart since there has been a possible mutation
			return true if n isn't marked since we found our key
		}
	}
	// So we would be storing our current node and the path we took 
	// Able to optimize this in bst by using our other node that will give us a succinct path instead of for
	// We can do this since that implies the range at which we can find our node
	S = an Atomic read of the nodes snapshot(so of n and root)
	if the S has has been mutated so that we can't  then restart
	return false
}